Los equipos que elijan Ruby deberán analizar los siguientes aspectos:

1● Disciplina de Tipado: cómo Ruby tipa las variables.

2● Interpretación: ¿Es ruby un lenguaje compilado o interpretado?

3● Metaprogramación: ¿Qué significa metaprogramar? ¿Qué ofrece Ruby en este sentido?

4● Clases abiertas: ¿Qué son las open clases o clases abiertas? ¿Que ventajas y desventajas tienen? ¿Qué es el monkey patching?

5● Módulos: ¿Qué es y qué tres usos tiene un module? ¿Qué es un mixin? ¿Para qué sirve?

6● Pureza: ¿se cumple el "todo es un objeto"? ¿Qué cosa no lo es? ¿Que consecuencias tiene?

7● Objetos: ¿se puede declarar objetos "al vuelo" y darles comportamiento dinámicamente?

8● Que conceptos del paradigma se ven reflejados en el lenguaje 



1: Ruby tiene un tipado dinámico y flexible, es decir, que no sera necesario que nosotros manualmente especifiquemos el tipo de dato de una variable a declarar, es más, dicha
variable no tendra un tipo asociado, esto permite que lineas como las siguientes sean aceptadas : distancia = 200  distancia = false, por lo que si bien al codear tendremos
mayor dinamismo al manejar variables, la responsabilidad del buen uso de estas segun sus tipos caera en nosotros.

2: Ruby es un lenguaje interpretado, es decir, que nuestro código en este lenguaje no necesita de un preprocesamiento/compilación para ser ejecutado
el ciclo de desarrollo (el tiempo entre el momento en que escribes el código y lo pruebas) es más rápido en un lenguaje interpretado. 
Eso se debe a que en lenguajes compilados es necesario realizar el proceso de compilación cada vez que cambias el código fuente, 
aunque con herramientas adicionales se puede automatizar.

3: La metaprogramación significa utilizar programas que escribren/manipulan otros programas (o a sí mismos) como datos, o que realizan tareas
que normalmente se efectuan en tiempo de ejecución permitiendo al programador ahorrar tiempo en la producción de código, en palabras mas simples,
es la habilidad de usar código para generar código.

Algunas de las herramientas que Ruby nos ofrece sobre este campo son:

* Modificar la estructura del programa en tiempo de ejecución. Una forma de hacerlo, es definiendo métodos dinámicamente usando el método method_missing. 
* Agregar métodos a instancias existentes de cualquier clase. Esto le permite agregar comportamiento y una instancia de una clase sin cambiar el comportamiento del resto de las instancias de esa clase.
* Definir diferentes métodos para una instancia de una clase dependiendo del tipo de parametro que se este analizando, gracias al método define_method.
// Hay más todavía.

4: Las clases abiertas u open clases son clases que permiten que en todo momento se agreguen nuevos métodos a las mismas o se modifiquen otros ya existentes.
Particularmente en ruby, si dos modulos se llaman igual su contenido se va a mezclar en un solo, lo cual tambien ocurre con las clases. Esto tiene un gran poder ya que nos permite extender funcionalidaddes y sobrescribir codigo de las librerias o hasta del mismo lenguaje de Ruby.
Esta funcionalidad es conocida como monkey patching y generalmente no se la considera una buena practica.

5: Modulos. Agrupan metodos, constantes, clases. Son similares a las clases pero no se pueden instaciar objetos a partis de ellos. Se declaran con la palabra clase "module"
	1) Sirven como "archivadores" (librerias) donde se introduce metodos y variables que no se quieren meter en las clases, con la finalidad de darle mas funcionalidad a las Calses que los utilizan. Generalmente se agrupan por tener algo en comun.
	2) Proveen un "namespace" que es como un scope donde se pueden definir variables y metodos sin que sus nombres colisionen con otros llamados igual.
	3) Permiten implemetnar mixin

	Mixin: 
	El Mixins es una técnica para la reutilización de código. El objetivo es que un metodo pueda estar en diferentes clases, aunque las clases no tengan ninguna relación.

6: Si, se cumple el "todo es un objeto", en ruby se entiende a objeto como un contenedor de datos que a su vez controlan el acceso a dichos datos, por ende hasta los resultados son objetos, incluso se cuentan con constructores "literales"
es decir que para crear un objeto no siempre hace falta la palabra new, en la siguiente tabla se pueden observar los constructores literales los cuales instancian objetos de las clases dadas

Clase	Constructor Literal	Ejemplo
String	' ó "	"nuevo string" o 'nuevo string'
Símbolo	:	:símbolo ó :"símbolo con espacios"
Array	[ ]	[1, 2, 3, 4, 5]
Hash	{ }	{"Nueva Yor" => "NY", "Oregon" => "OR"}
Rango	.. ó …	0…10 ó 0..9
Expresiones regulares	/	/([a-z]+)/

Por esto, y aunque a veces no lo parezca, siempre estamos creando objetos. En Ruby, todo es un objeto.

 

8: Conceptos que se ven reflejados

Como ya vimos que ruby es orientado a objetos, la mayoria de los conceptos que vimos en la materia que aparecen en este lenguaje son de este paradgima.

Obviamente al ser orientado a objetos estan muy presentes los tres pilares del paradigma, el encapsulamiento, polimorfismo y la asignacion de responsabilidad.
A su vez, aparecen los conceptos de objeto (donde la mayoria de los elementos los son), de clase (clases abtractas, clases abiertas), herencia (sintacticamente
se representan con un menor "<"), metodos y tambien comportamiento e interfaz.
En este lenguaje tambien se pueden tirar excepciones con la palabra reservada "raise" acompañada luegode un string con el mensaje que queremos mostrar.


Ruby es un lenguaje bastante expresivo ya que busca que ademas de tener nombres claros se los difenrecie con tres criterios.
Si el metodo retorna un booleano al nombre se le debe agregar un "?" al final, como por ejemplo:
hoy_esta_soleado? (su retorno sera true o false).
Si el metodo provoca algun efecto al nombre se le debe agregar un "!" al final como por ejemplo algun metodo que agregue algo a alguna lista o cambie el valor
de una variable.
Si el metodo retorna algo que no sea booleano solo lleva el nombre sin ningun agregado.


Para terminar, este lenguaje posee tanto inmutabilidad como efecto, que se controlan mediante la correcta asignacion de responsabilidad. Por ejemplo como ya vimos
en wollok, existen los metodos map y select(que es el filter) que no deben provocar un efecto, en cambio tenemos el metodo each que si busca este proposito.